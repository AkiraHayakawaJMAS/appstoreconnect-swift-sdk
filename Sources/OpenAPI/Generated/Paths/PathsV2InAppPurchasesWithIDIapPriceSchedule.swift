// Generated by Create API
// https://github.com/CreateAPI/CreateAPI

import Foundation
import URLQueryEncoder

extension APIEndpoint.V2.InAppPurchases.WithID {
	public var iapPriceSchedule: IapPriceSchedule {
		IapPriceSchedule(path: path + "/iapPriceSchedule")
	}

	public struct IapPriceSchedule {
		/// Path: `/v2/inAppPurchases/{id}/iapPriceSchedule`
		public let path: String

		public func get(parameters: GetParameters? = nil) -> Request<AppStoreConnect_Swift_SDK.InAppPurchasePriceScheduleResponse> {
			Request(path: path, method: "GET", query: parameters?.asQuery, id: "inAppPurchasesV2_iapPriceSchedule_getToOneRelated")
		}

		public struct GetParameters {
			public var fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules]?
			public var fieldsInAppPurchases: [FieldsInAppPurchases]?
			public var fieldsTerritories: [FieldsTerritories]?
			public var fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices]?
			public var include: [Include]?
			public var limitManualPrices: Int?
			public var limitAutomaticPrices: Int?

			public enum FieldsInAppPurchasePriceSchedules: String, Codable, CaseIterable {
				case inAppPurchase
				case baseTerritory
				case manualPrices
				case automaticPrices
			}

			public enum FieldsInAppPurchases: String, Codable, CaseIterable {
				case name
				case productID = "productId"
				case inAppPurchaseType
				case state
				case reviewNote
				case familySharable
				case contentHosting
				case app
				case inAppPurchaseLocalizations
				case pricePoints
				case content
				case appStoreReviewScreenshot
				case promotedPurchase
				case iapPriceSchedule
				case inAppPurchaseAvailability
				case images
			}

			public enum FieldsTerritories: String, Codable, CaseIterable {
				case currency
			}

			public enum FieldsInAppPurchasePrices: String, Codable, CaseIterable {
				case startDate
				case endDate
				case manual
				case inAppPurchaseV2
				case inAppPurchasePricePoint
				case territory
			}

			public enum Include: String, Codable, CaseIterable {
				case inAppPurchase
				case baseTerritory
				case manualPrices
				case automaticPrices
			}

			public init(fieldsInAppPurchasePriceSchedules: [FieldsInAppPurchasePriceSchedules]? = nil, fieldsInAppPurchases: [FieldsInAppPurchases]? = nil, fieldsTerritories: [FieldsTerritories]? = nil, fieldsInAppPurchasePrices: [FieldsInAppPurchasePrices]? = nil, include: [Include]? = nil, limitManualPrices: Int? = nil, limitAutomaticPrices: Int? = nil) {
				self.fieldsInAppPurchasePriceSchedules = fieldsInAppPurchasePriceSchedules
				self.fieldsInAppPurchases = fieldsInAppPurchases
				self.fieldsTerritories = fieldsTerritories
				self.fieldsInAppPurchasePrices = fieldsInAppPurchasePrices
				self.include = include
				self.limitManualPrices = limitManualPrices
				self.limitAutomaticPrices = limitAutomaticPrices
			}

			public var asQuery: [(String, String?)] {
				let encoder = URLQueryEncoder(explode: false)
				encoder.encode(fieldsInAppPurchasePriceSchedules, forKey: "fields[inAppPurchasePriceSchedules]")
				encoder.encode(fieldsInAppPurchases, forKey: "fields[inAppPurchases]")
				encoder.encode(fieldsTerritories, forKey: "fields[territories]")
				encoder.encode(fieldsInAppPurchasePrices, forKey: "fields[inAppPurchasePrices]")
				encoder.encode(include, forKey: "include")
				encoder.encode(limitManualPrices, forKey: "limit[manualPrices]")
				encoder.encode(limitAutomaticPrices, forKey: "limit[automaticPrices]")
				return encoder.items
			}
		}
	}
}
